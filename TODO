## Authentication
* [x] Create Server
* [x] Add auth router
* [x]Create user with POST /auth/signup
	* [x] validate required fields
	* [x] Check if username is unique
	* [x] hash password with bcrypt
	* [x] insert into db
* [x] Create Landing Page
	* [x] Link to Sign Up Page
* [x] Create Sign Up Page
	* [x] Form with: username and password
	* [x] When form is submitted
		* [x] Validate username 
			* [x] Display errors
		* [x] Validate password
			* [x] Display errors
		* [x] POST request to server
			* [x] Display errors
			* [x] If succesful sign up
				* [x] Redirect to login page
* [x] Login user with POST /auth/login
	* [x] validate the user
	* [x] check if username in db
		* [x] compare password with hashed password in db
		* [x] Create and sign a JWT
      * [x] Respond with JWT
* [x] Create Login Page
	* [x] Form with: username and password
	* [x] When form is submitted
		* [x] Validate username
			* [x] Display errors
		* [x] Validate password
			* [x] Display errors
		* [x] POST request to server /auth/login
			* [x] Display errors
			* [x] If succesful login
				* [x] Store the token in localStorage
				* [x] Redirect to the "/dashboard"
* [x] If a logged in user visits the signup or login page, redirect them to the dashboard
* [x] If a non logged in user visits the dashboard, redirect to the login page
* [x] After sign up, immediately login
* [x] Show username on dashboard
* [x] On homepage, show go to dashboard button instead of signup/login button
* [x] If logged in:
	* [x] Show logout button in header
	* [x] Show user username in header

### Authorization:
* [ ] Visitors can only see the homepage
	* [ ] checkTokenSetUser middleware
		* [ ] get token from Authorization header
			* [ ] if defined ---
				* [ ] Verify the token with the token secret
				* [ ] Set req.user to be the decoded verified payload
			* [ ] else - move along
	* [ ] isLoggedIn middleware
		* [ ] if req.user is set - move along
		* [ ] else - send an unauthorized error message
	* [ ] redirect to login form
* [ ] Logged in users can only see their page
* [ ] Create notes form on client
	* [ ] Title
	* [ ] Description
* [ ] POST /api/v1/notes
	* [ ] Must be logged in
	* [ ] Logged in Users Can Create Notes
		* [ ] Title
		* [ ] Description -- markdown
		* [ ] Set user_id on server with logged in users id
* [ ] GET /api/v1/notes
	* [ ] Must be logged in
	* [ ] Logged in Users Can request all their notes 
		* [ ] Get all notes in DB with logged in users user_id
* [ ] List all notes on client
	* [ ] Render description with Markdown


## Refactor
* [ ] frontend
* [ ] backend

## To deploy everything to the same heroku instance

* [ ] Move the server package.json to the root of the folder
* [ ] Update start script for server to be a relative path
* [ ] post-deploy script to server that will build Vue.js
* [ ] Add a static serve to the server that serves '../client/dist'
* [ ] Environment variable for DB connection and token secret
* [ ] Update calls in client from localhost:5000 to be your-app.herokuapp.com